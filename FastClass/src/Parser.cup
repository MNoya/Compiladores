package parser;

import ast.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol;

parser code {:

    public void syntax_error(Symbol currentToken) {
        report_error("Syntax error at [" + (currentToken.left+1) +"," + (currentToken.right+1) +"]!", null);
    }

    public static Symbol parse(Reader input) throws Exception {
        return (new Parser(new Lexer(input))).parse();
    }

    public static Symbol parse(String input) throws Exception {
        return parse(new StringReader(input));
    }

    public static void main(String[] args) throws Exception {
        if (args.length < 1) {
            System.out.println(parse(new InputStreamReader(System.in, "UTF8")).value);
        } else for (int i = 0; i < args.length; ++i) {
            System.out.println(parse(new InputStreamReader(new FileInputStream(args[i]), "UTF8")).value);
        }
    }
:}

terminal OUTPUT;
terminal JAVA;
terminal CSHARP;
terminal PHP;
terminal CLASS;
terminal LEFT_PARENTHESIS;
terminal COMMA;
terminal RIGHT_PARENTHESIS;
terminal COLON;
terminal LEFT_CURLY_BRACKET;
terminal RIGHT_CURLY_BRACKET;

terminal String GET_SET_CON;
terminal String ID;
terminal String SOURCE_CODE;

non terminal Programa prog;
non terminal Output output;
non terminal Clase clase;
non terminal Parametro param;

non terminal List<Parametro> repeat$param;
non terminal List<Clase> repeat$clase;
non terminal List<String> repeat$id;

precedence nonassoc LEFT_CURLY_BRACKET, RIGHT_CURLY_BRACKET;

start with prog;

prog ::= 
        OUTPUT output:$1 repeat$clase:$2
        {: RESULT = new Programa($1, $2); :}
;

output ::= 
        output:$1 COMMA JAVA
        {: 
            $1.setJava();
            RESULT = $1;
        :}
    |   output:$1 COMMA PHP
        {: 
            $1.setPhp();
            RESULT = $1;
        :}
    |   output:$1 COMMA CSHARP
        {: 
            $1.setCsharp();
            RESULT = $1;
        :}
    |   JAVA 
        {: 
            Output o = new Output(); 
            o.setJava();
            RESULT = o;
        :}
    |   PHP 
        {: 
            Output o = new Output(); 
            o.setPhp();
            RESULT = o;
        :}
    |   CSHARP 
        {: 
            Output o = new Output(); 
            o.setCsharp();
            RESULT = o;
        :}
;

clase ::=
        CLASS ID:$1 LEFT_PARENTHESIS repeat$param:$2 RIGHT_PARENTHESIS
        {:
            RESULT = new Clase($1, $2,null,null,null,null);
        :}
       
    | 
        CLASS ID:$1 LEFT_PARENTHESIS repeat$param:$2 RIGHT_PARENTHESIS ID:$3
        {:
            RESULT = new Clase($1, $2,$3,null,null,null);
        :}
    | 
         
        CLASS ID:$1 LEFT_PARENTHESIS repeat$param:$2 RIGHT_PARENTHESIS COLON repeat$id:$3 
        {:
            RESULT = new Clase($1, $2,null,$3,null,null);
        :}
     | 
         
        CLASS ID:$1 LEFT_PARENTHESIS repeat$param:$2 RIGHT_PARENTHESIS LEFT_CURLY_BRACKET SOURCE_CODE:$3 RIGHT_CURLY_BRACKET
        {:
            RESULT = new Clase($1, $2,null,null,$3,null);
        :}
        
      |   CLASS ID:$1 LEFT_PARENTHESIS repeat$param:$2 RIGHT_PARENTHESIS  LEFT_CURLY_BRACKET repeat$clase:$3 RIGHT_CURLY_BRACKET
        {:
            RESULT = new Clase($1, $2,null,null,null,$3);
        :}

      |   
        CLASS ID:$1 LEFT_PARENTHESIS repeat$param:$2 RIGHT_PARENTHESIS ID:$3 COLON repeat$id:$4 LEFT_CURLY_BRACKET SOURCE_CODE:$5 RIGHT_CURLY_BRACKET
        {:
            RESULT = new Clase($1, $2, $3, $4, $5, null);
        :}   
    
     |   
        CLASS ID:$1 LEFT_PARENTHESIS repeat$param:$2 RIGHT_PARENTHESIS ID:$3 COLON repeat$id:$4 
        {:
            RESULT = new Clase($1, $2, $3, $4, null, null);
        :} 
        
      |   
        CLASS ID:$1 LEFT_PARENTHESIS repeat$param:$2 RIGHT_PARENTHESIS ID:$3 LEFT_CURLY_BRACKET SOURCE_CODE:$4 RIGHT_CURLY_BRACKET
        {:
            RESULT = new Clase($1, $2, $3,null,$4,null);
        :}
	 |
	   CLASS ID:$1 LEFT_PARENTHESIS repeat$param:$2 RIGHT_PARENTHESIS COLON repeat$id:$3 LEFT_CURLY_BRACKET SOURCE_CODE:$4 RIGHT_CURLY_BRACKET
        {:
            RESULT = new Clase($1, $2,null, $3, $4, null);
        :}  
       
     |  
       CLASS ID:$1 LEFT_PARENTHESIS repeat$param:$2 RIGHT_PARENTHESIS  LEFT_CURLY_BRACKET SOURCE_CODE:$4 repeat$clase:$5 RIGHT_CURLY_BRACKET
        {:
            RESULT = new Clase($1, $2, null,null,$4, $5);
        :} 
      |   
        CLASS ID:$1 LEFT_PARENTHESIS repeat$param:$2 RIGHT_PARENTHESIS ID:$3  LEFT_CURLY_BRACKET SOURCE_CODE:$4 repeat$clase:$5 RIGHT_CURLY_BRACKET
        {:
            RESULT = new Clase($1, $2, $3, null,$4, $5);
        :}
                

    |   CLASS ID:$1 LEFT_PARENTHESIS repeat$param:$2 RIGHT_PARENTHESIS ID:$3 COLON LEFT_CURLY_BRACKET repeat$clase:$4 RIGHT_CURLY_BRACKET
        {:
            RESULT = new Clase($1, $2, $3,null,null, $4);
        :}

    |   CLASS ID:$1 LEFT_PARENTHESIS repeat$param:$2 RIGHT_PARENTHESIS COLON repeat$id:$3 LEFT_CURLY_BRACKET repeat$clase:$5 RIGHT_CURLY_BRACKET
        {:
            RESULT = new Clase($1, $2,null, $3, null, $5);
        :}

    |   
        CLASS ID:$1 LEFT_PARENTHESIS repeat$param:$2 RIGHT_PARENTHESIS ID:$3 COLON repeat$id:$4 LEFT_CURLY_BRACKET repeat$clase:$5 RIGHT_CURLY_BRACKET
        {:
            RESULT = new Clase($1, $2, $3, $4,null, $5);
        :}
      |   
        CLASS ID:$1 LEFT_PARENTHESIS repeat$param:$2 RIGHT_PARENTHESIS ID:$3 COLON repeat$id:$4 LEFT_CURLY_BRACKET SOURCE_CODE:$6 repeat$clase:$5 RIGHT_CURLY_BRACKET
        {:
            RESULT = new Clase($1, $2, $3, $4, $6, $5);
        :}
        
      |   
        CLASS ID:$1 LEFT_PARENTHESIS repeat$param:$2 RIGHT_PARENTHESIS COLON repeat$id:$4 LEFT_CURLY_BRACKET SOURCE_CODE:$6 repeat$clase:$5 RIGHT_CURLY_BRACKET
        {:
            RESULT = new Clase($1, $2,null, $4,$6, $5);
        :}
        
    
;

repeat$clase ::=

        {: 
            List<Clase> $0;
            $0 = new ArrayList<Clase>();
            RESULT = $0; 
        :}
    |   repeat$clase:$1 clase:$2 
        {:
            List<Clase> $0;
            $1.add($2);
            $0 = $1;
            RESULT = $0;
        :}
;

repeat$id ::=

        {: 
            List<String> $0;
            $0 = new ArrayList<String>();
            RESULT = $0; 
            
        :}
    |   repeat$id:$1 ID:$2 
        {:
            List<String> $0;
            $1.add($2);
            $0 = $1;
            RESULT = $0;
        :}
;

param ::= 
        ID:$1 GET_SET_CON:$2 ID:$3
        {: RESULT = new Parametro($1, $2, $3); :}
    |   ID:$1 ID:$2
        {: RESULT = new Parametro($1,"", $2); :}
;

repeat$param ::=

        {: 
            List<Parametro> $0;
            $0 = new ArrayList<Parametro>();
            RESULT = $0; 
        :}
    |   param:$1
    	{:
    		List<Parametro> $0;
            $0 = new ArrayList<Parametro>();
            $0.add($1);
            RESULT = $0;
    	:}    
    |   repeat$param:$1 COMMA param:$2 
        {:
            List<Parametro> $0;
            $1.add($2);
            $0 = $1;
            RESULT = $0;
        :}
;