package parser;

//import ast.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol;

parser code {:

	public void syntax_error(Symbol currentToken) {
		report_error("Syntax error at [" + (currentToken.left+1) +"," + (currentToken.right+1) +"]!", null);
	}

	public static Symbol parse(Reader input) throws Exception {
		return (new Parser(new Lexer(input))).parse();
	}

	public static Symbol parse(String input) throws Exception {
		return parse(new StringReader(input));
	}

	public static void main(String[] args) throws Exception {
		if (args.length < 1) {
			System.out.println(parse(new InputStreamReader(System.in, "UTF8")).value);
		} else for (int i = 0; i < args.length; ++i) {
			System.out.println(parse(new InputStreamReader(new FileInputStream(args[i]), "UTF8")).value);
		}
	}
:}

terminal OUTPUT;
terminal JAVA;
terminal CSHARP;
terminal PHP;
terminal CLASS;
terminal LEFT_PARENTHESIS;
terminal COMMA;
terminal RIGHT_PARENTHESIS;
terminal COLON;
terminal LEFT_CURLY_BRACKET;
terminal RIGHT_CURLY_BRACKET;
terminal DOUBLE_LEFT_CURLY_BRACKET;
terminal DOUBLE_RIGHT_CURLY_BRACKET;

terminal String GET_SET_CON;
terminal String ID;

non terminal Programa prog;
non terminal Output output;
non terminal Clase clase;
non terminal Parametro param;


// precedence nonassoc DOUBLE_EQUALS_SIGN;

start with prog;

prog ::= OUTPUT output:$1 CLASS ID:$2 LEFT_PARENTHESIS RIGHT_PARENTESIS	
	{ RESULT = new Programa($1, $2); }
;
output ::= output:$1 COMMA JAVA
	{ 
	  	$1.setJava();
		RESULT = $1;
	}
	|
	output:$1 COMMA PHP
	{ 
	  	$1.setPhp();
		RESULT = $1;
	}
	|
	output:$1 COMMA CSHARP
	{ 
		$1.setCsharp();
		RESULT = $1;
	}
	|
	JAVA 
	{ 
		Output o = new Output(); 
	  	o.setJava();
		RESULT = o;
	}
	|
	PHP 
	{ 
		Output o = new Output(); 
	  	o.setPhp();
		RESULT = o;
	}
	|
	CSHARP 
	{ 
		Output o = new Output(); 
	  	o.setCsharp();
		RESULT = o;
	}
	
	
	

